(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{185:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"javascript-判断对象中是否有某属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-判断对象中是否有某属性","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript 判断对象中是否有某属性")]),t._v(" "),a("p",[t._v("判断对象中是否有某属性的常见方式总结，不同的场景要使用不同的方式。")]),t._v(" "),a("h2",{attrs:{id:"点-或者方括号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#点-或者方括号","aria-hidden":"true"}},[t._v("#")]),t._v(" 点( . )或者方括号( [ ] )")]),t._v(" "),a("p",[t._v("通过点或者方括号可以获取对象的属性值，如果对象上不存在该属性，则会返回undefined。当然，这里的“不存在”指的是对象自身和原型链上都不存在，如果原型链有该属性，则会返回原型链上的属性值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lei'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取对象的自身的属性")]),t._v("\ntest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"lei"')]),t._v("\ntest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"lei"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取不存在的属性")]),t._v("\ntest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取原型上的属性")]),t._v("\ntest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"toString"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//toString() { [native code] }")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新增一个值为undefined的属性")]),t._v("\ntest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("un "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" undefined\n\ntest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("un              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined    不能用在属性值存在，但可能为 undefined的场景")]),t._v("\n")])])]),a("p",[t._v("所以，我们可以根据 Obj.x !== undefined 的返回值 来判断Obj是否有x属性。")]),t._v(" "),a("p",[t._v("这种方式很简单方便，局限性就是："),a("mark",[t._v("不能用在x的属性值存在，但可能为 undefined的场景")]),t._v("。 in运算符可以解决这个问题")]),t._v(" "),a("h2",{attrs:{id:"in-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" in 运算符")]),t._v(" "),a("p",[t._v("MDN 上对in运算符的介绍：")]),t._v(" "),a("blockquote",[a("p",[t._v("如果指定的属性在指定的对象或其原型链中，则in 运算符返回true。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" test        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'un'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" test             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'toString'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" test    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'age'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" test           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),a("p",[t._v("示例中可以看出，值为undefined的属性也可正常判断。")]),t._v(" "),a("p",[t._v("这种方式的局限性就是"),a("mark",[t._v("无法区分自身和原型链上的属性")]),t._v("，在只需要判断自身属性是否存在时，这种方式就不适用了。这时需要hasOwnProperty()")]),t._v(" "),a("h2",{attrs:{id:"hasownproperty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hasownproperty","aria-hidden":"true"}},[t._v("#")]),t._v(" hasOwnProperty()")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true   自身属性")]),t._v("\ntest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'age'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false  不存在")]),t._v("\ntest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'toString'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false  原型链上属性")]),t._v("\n")])])]),a("p",[t._v("可以看到，"),a("mark",[t._v("只有自身存在该属性时，才会返回true")]),t._v("。适用于只判断自身属性的场景。")]),t._v(" "),a("p",[t._v("三种方式各有优缺点，不同的场景使用不同的方式，有时还需要"),a("strong",[t._v("结合使用")]),t._v("，比如遍历自身属性的时候，就会把 for ··· in  ···和 hasOwnProperty()结合使用。")])])}],!1,null,null,null);e.options.__file="js-has-property.md";s.default=e.exports}}]);